#!/usr/bin/env python

import os
from os import remove, close
from shutil import copyfile, move, rmtree
import fileinput
from tempfile import mkstemp


# PARAMS
pkg_name = "msc_mlotz_pkg"
path_to_logger_config = "/home/mlotz/msc2_ws_irp6/src/msc_mlotz_pkg/src/compConfigs/repoUniConf.cpf"
relpath_to_logger_config ="compConfigs/repoUniConf.cpf"
path_to_irp_base_bringup = "/opt/ws_irp6_sim/share/irp6_bringup/"
robot_name = "p" # "p" / "ot"
hardware ="" # "no" / ""

perform_inject = 1;
#path_to_logger_config= os.path.abspath(relpath_to_logger_config)


#replace line method
def replace(file_path, pattern, subst):
    #Create temp file
    fh, abs_path = mkstemp()
    with open(abs_path,'w') as new_file:
        with open(file_path) as old_file:
            for line in old_file:
                new_file.write(line.replace(pattern, subst))
    os.close(fh)
    #Remove original file
    os.remove(file_path)
    #Move new file
    move(abs_path, file_path)
#--------------


#wipedirs
if os.path.exists('./config'):
	rmtree('./config');
if os.path.exists('./launch'):
	rmtree('./launch');

#mkdirs
if not os.path.exists('./config'):
    	os.makedirs('./config');
if not os.path.exists('./launch'):
    	os.makedirs('./launch');
#OT

#modify OPS
copyfile(path_to_irp_base_bringup+'config/irp6-'+robot_name+'-inside.ops', './config/repo_irp6-'+robot_name+'-inside.ops')
processing_foo1s = False


if perform_inject:
	

	for line in fileinput.input('./config/repo_irp6-'+robot_name+'-inside.ops', inplace=1):
	  if line.startswith('//          START COMPONENTS'):
	    processing_foo1s = True
	  else:
	    if processing_foo1s:
	      	print '//INJECTION - Last minute structure modifications:\n'
		print '//Uni - Reporting component'
		print 'loadComponent("repoUni","OCL::FileReporting")'
		print 'loadService("repoUni","marshalling")'
		print 'addPeer("repoUni","Irp6'+robot_name+'mForwardKinematic")'
		#print 'addPeer("repoUni","Irp6'+robot_name+'mForceTransformation")'
		print 'repoUni.setPeriod(0.002)'
		print 'repoUni.reportPort("Irp6'+robot_name+'mForwardKinematic","EndEffectorOutputPose")'
		#print 'repoUni.reportPort("Irp6'+robot_name+'mForceTransformation","OutputEndEffectorWrench")'
		print 'repoUni.marshalling.loadProperties("'+path_to_logger_config+'")'
		print 'addPeer("Irp6'+robot_name+'Scheme", "repoUni");'
		print 'Irp6'+robot_name+'Scheme.addBlock("repoUni");'


		if 1:		
			print '## Load an OptoforceComponent component'
			print 'loadComponent("HandForce1","CustomOptoforceComponent")'

			print '## Give it a periodic activity'
			print 'setActivity("HandForce1",0.001,3,ORO_SCHED_RT)'
			print 'HandForce1.loadService("rosparam");'
			print 'HandForce1.rosparam.getAll();'

			print 'stream("HandForce1.force0_out", ros.comm.topic("/optoforce1/force0"))'
			print 'stream("HandForce1.force0_scaled_out", ros.comm.topic("/optoforce1/force0_scaled"))'
			print 'stream("HandForce1.tare_in", ros.comm.topic("/optoforce1/tare"))'

			print 'HandForce1.configure()'


		if 1:
			print '## Load an OptoforceComponent component'
			print 'loadComponent("HandForce2","CustomOptoforceComponent")'

			print '## Give it a periodic activity'
			print 'setActivity("HandForce2",0.001,3,ORO_SCHED_RT)'
			print 'HandForce2.loadService("rosparam");'
			print 'HandForce2.rosparam.getAll();'

			print 'stream("HandForce2.force0_out", ros.comm.topic("/optoforce2/force0"))'
			print 'stream("HandForce2.force0_scaled_out", ros.comm.topic("/optoforce2/force0_scaled"))'
			print 'stream("HandForce2.tare_in", ros.comm.topic("/optoforce2/tare"))'

			print 'HandForce2.configure()'

			print 'HandForce1.start()'
			print 'HandForce2.start()'

	
	
		print 'addPeer("repoUni","HandForce2")'
		#print 'repoUni.reportPort("HandForce2","force0_out")'
		print 'repoUni.reportPort("HandForce2","force0_scaled_out")'

		print 'addPeer("repoUni","HandForce1")'
		#print 'repoUni.reportPort("HandForce1","force0_out")'
		print 'repoUni.reportPort("HandForce1","force0_scaled_out")'

		#Irp6pmForwardKinematic.WristOutputPose	
		print 'stream("Irp6pmForwardKinematic.WristOutputPose", ros.comm.topic("/irp6p_arm/WristOutputPose"))'


		#OptoCompensator1
		print 'loadComponent("OptoCompensator1","OptoCompensator")'
		print 'OptoCompensator1.loadService("rosparam");'
		print 'OptoCompensator1.rosparam.getAll();'
		print 'OptoCompensator1.configure()'
		print 'connect("OptoCompensator1.CurrentWristPose", "Irp6pmForwardKinematic.WristOutputPose", ConnPolicy())'
		print 'connect("OptoCompensator1.CurrentHandForceInput", "HandForce1.force0_scaled_out", ConnPolicy())'
		print 'connect("OptoCompensator1.Tool", "Irp6pmToolInt.CartesianPositionCommand", ConnPolicy())'
		print 'stream("OptoCompensator1.OutputCompensatedForce", ros.comm.topic("/optoCompensator1/force_out"));'
		print 'setActivity("OptoCompensator1",0.001,3,ORO_SCHED_RT)'
		print 'stream("OptoCompensator1.ToolGravityParam", ros.comm.topic("/optoCompensator1/tg_param"))'
		print 'stream("OptoCompensator1.OutputSensorPose", ros.comm.topic("/optoCompensator1/sensor_pose"))'
		print 'stream("OptoCompensator1.OutputZeroedForce", ros.comm.topic("/optoCompensator1/zero_force_out"))'
		#print 'OptoCompensator1.start()'

		#OptoCompensator2
		print 'loadComponent("OptoCompensator2","OptoCompensator")'
		print 'OptoCompensator2.loadService("rosparam");'
		print 'OptoCompensator2.rosparam.getAll();'
		print 'OptoCompensator2.configure()'
		print 'connect("OptoCompensator2.CurrentWristPose", "Irp6pmForwardKinematic.WristOutputPose", ConnPolicy())'
		print 'connect("OptoCompensator2.CurrentHandForceInput", "HandForce2.force0_scaled_out", ConnPolicy())'
		print 'connect("OptoCompensator2.Tool", "Irp6pmToolInt.CartesianPositionCommand", ConnPolicy())'
		print 'stream("OptoCompensator2.OutputCompensatedForce", ros.comm.topic("/optoCompensator2/force_out"));'
		print 'setActivity("OptoCompensator2",0.001,3,ORO_SCHED_RT)'
		print 'stream("OptoCompensator2.ToolGravityParam", ros.comm.topic("/optoCompensator2/tg_param"))'
		print 'stream("OptoCompensator2.OutputSensorPose", ros.comm.topic("/optoCompensator2/sensor_pose"))'
		print 'stream("OptoCompensator2.OutputZeroedForce", ros.comm.topic("/optoCompensator2/zero_force_out"))'
		#print 'OptoCompensator1.start()'


		#Optoreporters		
		print '//Compensator1 evaluation - Reporting component'
		print 'loadComponent("repoOptoCompensator1","OCL::FileReporting")'
		print 'loadService("repoOptoCompensator1","marshalling")'
		print 'addPeer("repoOptoCompensator1","OptoCompensator1")'
		print 'addPeer("repoOptoCompensator1","OptoCompensator2")'
		print 'repoOptoCompensator1.setPeriod(0.002)'

		print 'repoOptoCompensator1.reportPort("OptoCompensator1","OutputZeroedForce")'
		print 'repoOptoCompensator1.reportPort("OptoCompensator1","OutputCompensatedForce")'
		print 'repoOptoCompensator1.reportPort("OptoCompensator2","OutputZeroedForce")'
		print 'repoOptoCompensator1.reportPort("OptoCompensator2","OutputCompensatedForce")'
		
		print 'repoOptoCompensator1.marshalling.loadProperties("'+path_to_logger_config+'")'
		print 'addPeer("Irp6'+robot_name+'Scheme", "repoOptoCompensator1");'
		print 'Irp6'+robot_name+'Scheme.addBlock("repoOptoCompensator1");'


		#OptoControler
		print '//OptoController'
		print 'loadComponent("OptoController","OptoController")'
		print 'connect("OptoCompensator1.OutputCompensatedForce", "OptoController.port_HandForce1_in", ConnPolicy())'
		print 'connect("OptoCompensator2.OutputCompensatedForce", "OptoController.port_HandForce2_in", ConnPolicy())'
		print 'connect("OptoController.CurrentEndEffectorPose", "Irp6pmForwardKinematic.WristOutputPose", ConnPolicy())'
		print 'stream("OptoController.OutputEndEffectorPose", ros.comm.topic("/optoController/OutputPose"))'
		print 'OptoController.configure'
		print 'repoOptoController.setPeriod(0.002)'
	
		print '\n//END_OF_INJECTION'

	    processing_foo1s = False
	  print line,

#modify AUX files
#1
copyfile(path_to_irp_base_bringup+'config/irp6-'+robot_name+'-'+hardware+'hardware-inside.ops', './config/repo_irp6-'+robot_name+'-'+hardware+'hardware-inside.ops')
replace ('./config/repo_irp6-'+robot_name+'-'+hardware+'hardware-inside.ops', 'runScript( ros.find("irp6_bringup") + "/config/irp6-'+robot_name+'-inside.ops")' , 'runScript( ros.find("'+pkg_name +'") + "/src/config/repo_irp6-'+robot_name+'-inside.ops")')
#2
copyfile(path_to_irp_base_bringup+'config/irp6-'+robot_name+'-'+hardware+'hardware.ops', './config/repo_irp6-'+robot_name+'-'+hardware+'hardware.ops')
replace ('./config/repo_irp6-'+robot_name+'-'+hardware+'hardware.ops', 'runScript( ros.find("irp6_bringup") + "/config/irp6-'+robot_name+'-'+hardware+'hardware-inside.ops")' , 'runScript( ros.find("'+pkg_name +'") + "/src/config/repo_irp6-'+robot_name+'-'+hardware+'hardware-inside.ops")')


#ros.import("irp6_force_sensor")
if perform_inject:
	for line in fileinput.input('./config/repo_irp6-'+robot_name+'-'+hardware+'hardware.ops', inplace=1):
	  if line.startswith('ros.import("irp6_force_sensor")'):
	    processing_foo1s = True
	  else:
	    if processing_foo1s:
	      	print '//INJECTION - Last minute componet imports:\n'
		print '//custom components:'
		print 'ros.import("'+pkg_name+'")'
		print 'ros.import("optoforce_component");'
		print '\n//END_OF_INJECTION'

	    processing_foo1s = False
	  print line,

#modify launch
copyfile(path_to_irp_base_bringup+'launch/irp6-'+robot_name+'-'+hardware+'hardware.launch', './launch/repo_irp6-'+robot_name+'-'+hardware+'hardware.launch')
replace ('./launch/repo_irp6-'+robot_name+'-'+hardware+'hardware.launch', '<arg name="DEPLOYER_ARGS" value="-s $(find irp6_bringup)/config/irp6-'+robot_name+'-'+hardware+'hardware.ops"/>' , '<arg name="DEPLOYER_ARGS" value="-s $(find '+pkg_name+')/src/config/repo_irp6-'+robot_name+'-'+hardware+'hardware.ops"/>')


#Optoforce launch sequence
copyfile(path_to_irp_base_bringup+'launch/irp6-'+robot_name+'-'+hardware+'hardware-inside.launch', './launch/repo_irp6-'+robot_name+'-'+hardware+'hardware-inside.launch')

replace ('./launch/repo_irp6-'+robot_name+'-'+hardware+'hardware.launch','<include file="$(find irp6_bringup)/launch/irp6-'+robot_name+'-'+hardware+'hardware-inside.launch" ns="IRP6_P_OROCOS_ROBOT">' , '<include file="/home/mlotz/msc2_ws_irp6/src/msc_mlotz_pkg/src/launch/repo_irp6-'+robot_name+'-'+hardware+'hardware-inside.launch" ns="IRP6_P_OROCOS_ROBOT">')


copyfile(path_to_irp_base_bringup+'launch/irp6-'+robot_name+'-inside.launch', './launch/repo_irp6-'+robot_name+'-inside.launch')

replace ('./launch/repo_irp6-'+robot_name+'-'+hardware+'hardware-inside.launch','<include file="$(find irp6_bringup)/launch/irp6-'+robot_name+'-inside.launch">' , '<include file="/home/mlotz/msc2_ws_irp6/src/msc_mlotz_pkg/src/launch/repo_irp6-'+robot_name+'-inside.launch">')

if perform_inject:
	for line in fileinput.input('./launch/repo_irp6-'+robot_name+'-inside.launch', inplace=1):
	  if line.startswith('    <rosparam>'):
	    processing_foo1s = True
	  else:
	    if processing_foo1s:
		print '      HandForce1:'
		print '        sensor_name: IFE049'
		print '        device_name: can0'
		print '        prefix: right'
		print '        n_sensors: 1      '
		print '        can_rx_id: 256'
		print '        can_tx_id: 257'
		print '        nominal_capacity_x: 20.0'
		print '        nominal_capacity_y: 20.0'
		print '        nominal_capacity_z: 200.0'
		print '        counts_nc_0_x: 11208'
		print '        counts_nc_0_y: 10929'
		print '        counts_nc_0_z: 16240'
		print '      HandForce2:'
		print '        sensor_name: IFE048'
		print '        device_name: can0'
		print '        prefix: right'
		print '        n_sensors: 1      '
		print '        can_rx_id: 258'
		print '        can_tx_id: 259'
		print '        nominal_capacity_x: 20.0'
		print '        nominal_capacity_y: 20.0'
		print '        nominal_capacity_z: 200.0'
		print '        counts_nc_0_x: 11738'
		print '        counts_nc_0_y: 10593'
		print '        counts_nc_0_z: 16276'
		print '      OptoCompensator1:'
		print '        is_right_turn_frame: true'
		print '        tool_weight: 0.511083744'
		print '        gravity_arm_in_wrist:'
		print '          x: 0.0'
		print '          y: 0.0'
		print '          z: 0.0'
		print '        weightInBpos:'
		print '          x: 0.119557459'
		print '          y: 0.133589532'
		print '          z: 0.609605911'
		print '        sensor_frame:'
		print '          orientation:'
		print '            w: 0.0' 
		print '            x: 0.0'
		print '            y: 0.0'
		print '            z: -1.0'
		print '          position:'
		print '            x: 0.0'
		print '            y: 0.0'
		print '            z: 0.09'
		print '        wrench2sensor_R_param:'
		print '          x: 0.5'
		print '          y: -0.5'
		print '          z: 0.5'
		print '          w: 0.5'
		print '        zeroing_offset:'
		print '          x: 0.0'
		print '          y: 0.0'
		print '          z: 0.0'
		print '      OptoCompensator2:'
		print '        is_right_turn_frame: true'
		print '        tool_weight: 0.511083744'
		print '        gravity_arm_in_wrist:'
		print '          x: 0.0'
		print '          y: 0.0'
		print '          z: 0.0'
		print '        weightInBpos:'
		print '          x: 0.119557459'
		print '          y: 0.133589532'
		print '          z: 0.609605911'
		print '        sensor_frame:'
		print '          orientation:'
		print '            w: 0.0' 
		print '            x: 0.0'
		print '            y: 0.0'
		print '            z: -1.0'
		print '          position:'
		print '            x: 0.0'
		print '            y: 0.0'
		print '            z: 0.09'
		print '        wrench2sensor_R_param:'
		print '          x: 0.5'
		print '          y: 0.5'
		print '          z: 0.5'
		print '          w: -0.5'
		print '        zeroing_offset:'
		print '          x: 0.0'
		print '          y: 0.2'
		print '          z: 1.2'

	    processing_foo1s = False
	  print line,




